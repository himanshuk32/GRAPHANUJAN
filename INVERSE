
#include <iostream>
#include <windows.h>
#include <objidl.h>
#include <gdiplus.h>
#include<math.h>
#include<conio.h>
#include <stdio.h>
using namespace Gdiplus;
#pragma comment (lib,"Gdiplus.lib")
#define pi 3.14151926353
using namespace std;



VOID OnPaint(HDC hdc)
{
	float a1 = 1, a2 = 0.5, a3 = 1.0, a4 = 1, a5 = 0.2, a6 = 1.0, smal, large, i;

	Graphics graphics(hdc);
	//	char ch;
	//	cout << "Enter the value of a1,a2,a3,a4,a5 if your function is \n";
	//cout << " a1*(pow(sin((a2)*x),a3)*(pow(cos((a4)*x),a5)";
	//cin >> a1 >> a2 >> a3 >> a4 >> a5;    
	/*	cout << "Press y to continue";
	cin >> ch;
	if ((ch == 'y') || (ch == 'Y'))
	{
	clrscr();
	}*


	Pen pen(Color(255, 0, 0, 255)), pen1(Color(200, 0, 0, 0));
	for (int i = 0; i < 1100; i++)
	{
	Point pt1 = Point(750 + i, 450 - (a3 + a4*sqrt((float)-1 + pow((float)i - a1, 2) / (a2*a2))));
	Point pt2 = Point(751 + i, 450 - (a3 + a4*sqrt((float)-1 + pow((float)i + 1 - a1, 2) / (a2*a2))));
	Point pt5 = Point(750 + i, 450 - (a3 - a4*sqrt((float)-1 + pow((float)i - a1, 2) / (a2*a2))));
	Point pt6 = Point(751 + i, 450 - (a3 - a4*sqrt((float)-1 + pow((float)i + 1 - a1, 2) / (a2*a2))));
	graphics.DrawLine(&pen, pt1, pt2);
	graphics.DrawLine(&pen, pt5, pt6);
	//graphics.DrawLine(&pen, i + 750.0000, 450.0000 - 100 * a1*(pow((double)sin((a2)*i / 180), a3)*(pow((double)cos((a4)*i / 180), a5)), i + 751.0000, 450.0000 - 100 * a1*(pow((double)sin((a2)*(i + 10) / 180), a3))*(pow((float)cos((a4)*(i + 1) / 180), a5))));
	}
	//	for (int i = 0; i < 1100; i++)
	/*{
	graphics.DrawLine(&pen, i + 750, 450 - 100 * tan(i*pi / 180), i + 751, 450 - 100 * tan((i + 1)*pi / 180));
	}*/


	//case1
	Pen pen(Color(255, 0, 0, 255)), pen1(Color(200, 0, 0, 0));
	if ((a3 > 0) && (a6 > 0))
	{
		if (fabs(a2) > fabs(a5))
		{
			large = fabs(a2);
			smal = fabs(a5);
		}

		else{
			smal = fabs(a2);
			large = fabs(a5);
		}
		for (i = -1 / (smal); i < 1 / (large); i += 0.01)
		{
			Point pt1 = Point(i + 750, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*i, a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*i, a5)), a6))));
			Point pt2 = Point(i + 751, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*(i + 1), a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*(i + 1), a5)), a6))));
			graphics.DrawLine(&pen, pt1, pt2);
		}
	}
	//case2

	else if ((a3>0) && (a6<0)) {


		if (fabs(a2)>fabs(a5))
		{
			large = fabs(a2);
			smal = fabs(a5);
		}
		else {
			large = fabs(a5);
			smal = fabs(a2);
		}

		if (((a2) > 0) && ((a5) > 0)){
			for (i = 1 / fabs(large); i < 1 / fabs(smal); i += 0.01){
				Point pt1 = Point(i + 750, 450 - a1*(pow((float)(18/pi)*asin(pow((float)(a2)*i, a3)), a4)*(pow((float)(18/pi)*acos(pow((float)(a4)*i, a5)), a6))));
				Point pt2 = Point(i + 751, 450 - a1*(pow((float)(18/pi)*asin(pow((float)(a2)*(i + 1), a3)), a4)*(pow((float)(18/pi)*acos(pow((float)(a4)*(i + 1), a5)), a6))));
				graphics.DrawLine(&pen, pt1, pt2);
			}
		}
		if (((a2) < 0) && ((a5) > 0)){
			for (i = -1 / fabs(a2); i < 1 / fabs(a2); i += 0.01){
				Point pt1 = Point(i + 750, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*i, a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*i, a5)), a6))));
				Point pt2 = Point(i + 751, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*(i + 1), a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*(i + 1), a5)), a6))));
				graphics.DrawLine(&pen, pt1, pt2);
			}
		}

		if (((a2)>0) && ((a5) < 0)){
			for (i = -1 / fabs(a5); i < 1 / fabs(a5); i += 0.01){
				Point pt1 = Point(i + 750, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*i, a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*i, a5)), a6))));
				Point pt2 = Point(i + 751, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*(i + 1), a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*(i + 1), a5)), a6))));
				graphics.DrawLine(&pen, pt1, pt2);
			}
		}

		if (((a2) < 0) && (fabs(a5) < 0)){
			for (i = -1 / fabs(smal); i < 1 / (large); i += 0.01){
				Point pt1 = Point(i + 750, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*i, a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*i, a5)), a6))));
				Point pt2 = Point(i + 751, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*(i + 1), a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*(i + 1), a5)), a6))));
				graphics.DrawLine(&pen, pt1, pt2);
			}
		}
	}


	//case3

	if (((a3) < 0) && ((a6) > 0)){

		if (fabs(a2) > fabs(a5)){
			large = fabs(a2);
			smal = fabs(a5);
		}

		else {
			large = fabs(a2);
			smal = fabs(a5);
		}

		if (((a2) > 0) && ((a5) > 0)){
			for (i = 1 / fabs(large); i < 1 / fabs(smal); i += 0.01)
			{
				Point pt1 = Point(i + 750, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*i, a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*i, a5)), a6))));
				Point pt2 = Point(i + 751, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*(i + 1), a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*(i + 1), a5)), a6))));
				graphics.DrawLine(&pen, pt1, pt2);
			}
		}
		else if (((a2) < 0) && ((a5) > 0)){
			for (i = -1 / fabs(a2); i < 1 / fabs(a2); i += 0.01){
				Point pt1 = Point(i + 750, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*i, a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*i, a5)), a6))));
				Point pt2 = Point(i + 751, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*(i + 1), a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*(i + 1), a5)), a6))));
				graphics.DrawLine(&pen, pt1, pt2);
			}
		}

		else if (((a2)>0) && ((a5) < 0)){
			for (i = -1 / fabs(a5); i < 1 / fabs(a5); i += 0.01){
				Point pt1 = Point(i + 750, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*i, a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*i, a5)), a6))));
				Point pt2 = Point(i + 751, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*(i + 1), a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*(i + 1), a5)), a6))));
				graphics.DrawLine(&pen, pt1, pt2);
			}
		}

		else if (((a2) < 0) && ((a5) < 0)){
			for (i = -1 / fabs(smal); i < 1 / (large); i += 0.01){
				Point pt1 = Point(i + 750, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*i, a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*i, a5)), a6))));
				Point pt2 = Point(i + 751, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*(i + 1), a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*(i + 1), a5)), a6))));
				graphics.DrawLine(&pen, pt1, pt2);
			}
		}


	}

	//case4

	else 	if (((a3) < 0) && ((a6) < 0)){

		if (fabs(a2) > fabs(a3)){
			large = fabs(a2);
			smal = fabs(a5);
		}
		else {
			large = fabs(a5);
			smal = fabs(a2);
		}

		for (i = 1 / fabs(smal); i < -1 / (large); i += 0.01){
			Point pt1 = Point(i + 750, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*i, a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*i, a5)), a6))));
			Point pt2 = Point(i + 751, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*(i + 1), a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*(i + 1), a5)), a6))));
			graphics.DrawLine(&pen, pt1, pt2);
		}




	}


	/*	Point pt1 = Point(i + 750, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*i,a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*i,a5)), a6))));
		Point pt2 = Point(i + 751, 450 - a1*(pow((float)(1)*asin(pow((float)(a2)*(i+1), a3)), a4)*(pow((float)(1)*acos(pow((float)(a4)*(i+1), a5)), a6))));
		graphics.DrawLine(&pen, pt1, pt2);
		*/



	/*	for (int i = -1100; i < 0; i++)
		{
		Point pt3 = Point(750 + i, 450 - (a3 + a4*sqrt((float)-1 + pow((float)i - a1, 2) / (a2*a2))));
		Point pt4 = Point(751 + i, 450 - (a3 + a4*sqrt((float)-1 + pow((float)i + 1 - a1, 2) / (a2*a2))));
		Point pt7 = Point(750 + i, 450 - (a3 - a4*sqrt((float)-1 + pow((float)i - a1, 2) / (a2*a2))));
		Point pt8 = Point(751 + i, 450 - (a3 - a4*sqrt((float)-1 + pow((float)i + 1 - a1, 2) / (a2*a2))));


		graphics.DrawLine(&pen, pt3, pt4);
		graphics.DrawLine(&pen, pt7, pt8);
		//graphics.DrawLine(&pen, i + 750.0, 450.0 - 100 *a1*(pow((float)sin((a2)*i/180),a3)*(pow((float)cos((a4)*i/180),a5), i + 751.0, 450.0 - 100 *a1*(pow((float)sin((a2)*(i+1)/180),a3))*(pow((float)cos((a4)*(1+i)/180),a5)))));
		}*/
	{
		graphics.DrawLine(&pen1, 750, 0, 750, 1000);
		graphics.DrawLine(&pen1, 751, 0, 751, 1001);
	}
	{
		graphics.DrawLine(&pen1, 0, 450, 1800, 450);
		graphics.DrawLine(&pen1, 0, 451, 1801, 451);
	}

}


LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

INT WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, PSTR, INT iCmdShow)
{
	HWND                hWnd;
	MSG                 msg;
	WNDCLASS            wndClass;
	GdiplusStartupInput gdiplusStartupInput;
	ULONG_PTR           gdiplusToken;

	// Initialize GDI+.
	GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);

	wndClass.style = CS_HREDRAW | CS_VREDRAW;
	wndClass.lpfnWndProc = WndProc;
	wndClass.cbClsExtra = 0;
	wndClass.cbWndExtra = 0;
	wndClass.hInstance = hInstance;
	wndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	wndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	wndClass.lpszMenuName = NULL;
	wndClass.lpszClassName = TEXT("GettingStarted");

	RegisterClass(&wndClass);

	hWnd = CreateWindow(
		TEXT("GettingStarted"),   // window class name
		TEXT("Getting Started"),  // window caption
		WS_OVERLAPPEDWINDOW,      // window style
		CW_USEDEFAULT,            // initial x position
		CW_USEDEFAULT,            // initial y position
		CW_USEDEFAULT,            // initial x size
		CW_USEDEFAULT,            // initial y size
		NULL,                     // parent window handle
		NULL,                     // window menu handle
		hInstance,                // program instance handle
		NULL);                    // creation parameters

	ShowWindow(hWnd, iCmdShow);
	UpdateWindow(hWnd);

	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

	GdiplusShutdown(gdiplusToken);
	return msg.wParam;
}  // WinMain

LRESULT CALLBACK WndProc(HWND hWnd, UINT message,
	WPARAM wParam, LPARAM lParam)
{
	HDC          hdc;
	PAINTSTRUCT  ps;

	switch (message)
	{
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		OnPaint(hdc);
		EndPaint(hWnd, &ps);
		return 0;
	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
} // WndProc
